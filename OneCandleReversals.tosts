#
# One-candle Reversals
# v1.0.0
#
# Highlights candles with body heights the same as or larger than ATR
# and larger than half of the entire range, and uses them to find /committed/
# reversals that potentially signal a change in the prevailing trend
# and/or create future bias due to unsatisfied supply or demand.
#
# The bullish and bearish reversal indicators (disabled by default) mark
# large one-candle reversals where buyers have overcome sellers or vice versa.
#
# The supply and demand clouds are drawn from the open of a reversal-confirming
# candle to the low of a bullish reversal candle (if buyers/demand)
# or high of a bearish revesal candle (if sellers/supply).
#
# The supply cloud displays only bearish reversals, the demand cloud only
# bullish reversals. The combined cloud (disabled by default) displays both
# bullish and bearish large one-candle reversal areas using a single cloud.
#
# The supply and demand profiles plot bullish and bearish reversals.
#
# @author: Andy Hudock (@mars) <ahudock@pm.me>
#   based on Blake Young's large candle study and one candle reversal logic
#

# Maximum number of bars allowed between large reversal and confirmation condles
input lookback = 3;

# Average length for determining large candles
input avg_length = 20;

# Minimum percentage ATR for large candles
input atr_factor = 0.8;

# Enable reversal indicator plots
input enable_reversal_indicators = no;

# Enable supply (sellers) cloud
input enable_supply_cloud = yes;

# Enable demand (buyers) cloud
input enable_demand_cloud = yes;

# Enable combined (buyers and sellers) cloud
input enable_combined_cloud = no;

# Enable supply/demand cloud borders
input enable_borders = no;

# Enable supply profile
input enable_supply_profile = yes;

# Enable demand profile
input enable_demand_profile = yes;

def candle_range             = high - low;
def is_bull_candle           = open < close;
def is_large_body            = BodyHeight() >= (candle_range * .5);
def is_avg_candle_size       = Average(candle_range, avg_length) * atr_factor;
def is_larger_than_avg       = candle_range >= is_avg_candle_size;
def is_large_candle          = is_large_body && is_larger_than_avg;
def is_confirming            = 0;
def is_reversal;
def reversal_type            = {default none, bearish, bullish};
def bullish_reversal_id;
def bullish_reversal_value;
def bullish_confirming_id;
def bullish_confirming_value;
def bearish_reversal_id;
def bearish_reversal_value;
def bearish_confirming_id;
def bearish_confirming_value;

# Large bullish candle color
DefineGlobalColor("large uptick", Color.GREEN);

# Normal bullish candle color
DefineGlobalColor("normal uptick", Color.DARK_GREEN);

# Large bearish candle color
DefineGlobalColor("large downtick", Color.RED);

# Normal bearish candle color
DefineGlobalColor("normal downtick", Color.DARK_RED);

# Highlight large candles
AssignPriceColor(
    if is_large_candle && is_bull_candle then
        # Large bullish candle
        GlobalColor("large uptick")
    else if ! is_large_candle && is_bull_candle then
        # Normal bullish candle
        GlobalColor("normal uptick")
    else if is_large_candle && ! is_bull_candle then
        # Large bearish candle
        GlobalColor("large downtick")
    else
        # Normal bearish candle
        GlobalColor("normal downtick")
);

# Find large reversal candles
if (BarNumber() == 1) {
    # First bar init
    is_reversal = 0;
    reversal_type = reversal_type.none;
    bullish_reversal_id = 0;
    bullish_reversal_value = Double.NaN;
    bullish_confirming_id = 0;
    bullish_confirming_value = Double.NaN;
    bearish_reversal_id = 0;
    bearish_reversal_value = Double.NaN;
    bearish_confirming_id = 0;
    bearish_confirming_value = Double.NaN;
} else if (is_large_candle && is_bull_candle) {
    # Large bullish candle
    bullish_confirming_id = fold i = 1 to lookback + 1
        with is_bullish_reversal
        while ! is_bullish_reversal do
            if is_large_candle[i]
                and ! is_bull_candle[i]
                and close > high[i]
                    then
                        # Confirmed bullish reversal
                        BarNumber() - i
            else 0
    ;

    if (bullish_confirming_id > bullish_confirming_id[1]) {
        # Confirmed bullish reversal
        is_reversal = 1;
        reversal_type = reversal_type.bullish;
        bullish_reversal_id = BarNumber();
        bullish_reversal_value = low;
        bullish_confirming_value = GetValue(
            open, BarNumber() - bullish_confirming_id
        );
    } else {
        is_reversal = 0;
        reversal_type = reversal_type[1];
        bullish_reversal_id = bullish_reversal_id[1];
        bullish_reversal_value = bullish_reversal_value[1];
        bullish_confirming_value = bullish_confirming_value[1];
    }
    bearish_reversal_id = bearish_reversal_id[1];
    bearish_confirming_id = bearish_confirming_id[1];
    bearish_reversal_value = bearish_reversal_value[1];
    bearish_confirming_value = bearish_confirming_value[1];
} else if (is_large_candle && ! is_bull_candle) {
    # Large bearish candle
    bearish_confirming_id = fold j = 1 to lookback + 1
        with is_bearish_reversal
        while ! is_bearish_reversal do
            if is_large_candle[j]
                and is_bull_candle[j]
                and close < low[j]
                    then
                        # Confirmed bearish reversal
                        BarNumber() - j
            else 0
    ;

    if (bearish_confirming_id > bearish_confirming_id[1]) {
        # Confirmed bearish reversal
        is_reversal = 1;
        reversal_type = reversal_type.bearish;
        bearish_reversal_id = BarNumber();
        bearish_reversal_value = high;
        bearish_confirming_value = GetValue(
            open, BarNumber() - bearish_confirming_id
        );
    } else {
        is_reversal = 0;
        bearish_reversal_id = bearish_reversal_id[1];
        reversal_type = reversal_type[1];
        bearish_reversal_value = bearish_reversal_value[1];
        bearish_confirming_value = bearish_confirming_value[1];
    }
    bullish_confirming_id = bullish_confirming_id[1];
    bullish_reversal_id = bullish_reversal_id[1];
    bullish_reversal_value = bullish_reversal_value[1];
    bullish_confirming_value = bullish_confirming_value[1];
} else {
    # Small candle
    is_reversal = 0;
    reversal_type = reversal_type[1];
    bullish_reversal_id = bullish_reversal_id[1];
    bullish_reversal_value = bullish_reversal_value[1];
    bullish_confirming_id = bullish_confirming_id[1];
    bullish_confirming_value = bullish_confirming_value[1];
    bearish_reversal_id = bearish_reversal_id[1];
    bearish_reversal_value = bearish_reversal_value[1];
    bearish_confirming_id = bearish_confirming_id[1];
    bearish_confirming_value = bearish_confirming_value[1];
}

# Plot reversal indicators
plot bullish_reversal =
    if is_reversal && reversal_type == reversal_type.bullish
    then low
    else Double.NaN
;
bullish_reversal.SetPaintingStrategy(PaintingStrategy.ARROW_UP);
bullish_reversal.SetDefaultColor(Color.CYAN);
bullish_reversal.SetHiding(if enable_reversal_indicators then 0 else 1);

plot bearish_reversal =
    if is_reversal && reversal_type == reversal_type.bearish
    then high
    else Double.NaN
;
bearish_reversal.SetPaintingStrategy(PaintingStrategy.ARROW_DOWN);
bearish_reversal.SetDefaultColor(Color.MAGENTA);
bearish_reversal.SetHiding(if enable_reversal_indicators then 0 else 1);

# Plot supply and demand clouds
plot supply_1;
plot supply_2;

if (enable_supply_cloud && ! IsNaN(open)) {
    supply_1 = bearish_confirming_value[-1];
    supply_2 = bearish_reversal_value[-1];
} else {
    supply_1 = Double.NaN;
    supply_2 = Double.NaN;
}

supply_1.SetDefaultColor(Color.MAGENTA);
supply_2.SetDefaultColor(Color.MAGENTA);

supply_1.Hide();
supply_2.Hide();

AddCloud(supply_1, supply_2, Color.MAGENTA, Color.MAGENTA, enable_borders);

plot demand_1;
plot demand_2;

if (enable_demand_cloud && ! IsNaN(open)) {
    demand_1 = bullish_confirming_value[-1];
    demand_2 = bullish_reversal_value[-1];
} else {
    demand_1 = Double.NaN;
    demand_2 = Double.NaN;
}

demand_1.SetDefaultColor(Color.CYAN);
demand_2.SetDefaultColor(Color.CYAN);

demand_1.Hide();
demand_2.Hide();

AddCloud(demand_1, demand_2, Color.CYAN, Color.CYAN, enable_borders);

plot combined_1;
plot combined_2;

if (enable_combined_cloud && ! IsNaN(open)) {
    if (reversal_type == reversal_type.bullish) {
        combined_1 = bullish_confirming_value[-1];
        combined_2 = bullish_reversal_value[-1];
    } else {
        combined_1 = bearish_confirming_value[-1];
        combined_2 = bearish_reversal_value[-1];
    }
} else {
    combined_1 = Double.NaN;
    combined_2 = Double.NaN;
}

combined_1.SetDefaultColor(Color.CYAN);
combined_2.SetDefaultColor(Color.MAGENTA);

combined_1.Hide();
combined_2.Hide();

AddCloud(combined_1, combined_2, Color.CYAN, Color.MAGENTA, enable_borders);

# Profile bullish/bearish reversals
def start_new_profile = BarNumber() != BarNumber()[1];
def price_per_row = PricePerRow.AUTOMATIC;
def value_area_profile = 100;

profile supply_profile = DataProfile(
    data = if enable_supply_profile then bearish_reversal else Double.NaN,
    onExpansion = yes,
    startNewProfile = start_new_profile,
    "value area percent" = value_area_profile,
    pricePerRow = price_per_row
);
supply_profile.Show(Color.MAGENTA);

profile demand_profile = DataProfile(
    data = if enable_demand_profile then bullish_reversal else Double.NaN,
    onExpansion = yes,
    startNewProfile = start_new_profile,
    "value area percent" = value_area_profile,
    pricePerRow = price_per_row
);
demand_profile.Show(Color.CYAN);
